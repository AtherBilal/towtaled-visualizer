{"version":3,"sources":["utils/getAlerts.js","utils/getDriverLocations.js","App.js","index.js"],"names":["getAlerts","layer","a","fetch","then","res","json","locations","features","map","location","olFeature","name","provider","toUpperCase","Date","timestamp","data","geometry","olGeomPoint","fromLonLat","long","lat","getSource","clear","addFeatures","getDriverLocations","driverLocations","driverLocationsFeatures","driverLocationsFeature","userid","iconStyle","olStyle","stroke","olStroke","image","olIcon","opacity","src","scale","setStyle","App","onMapInit","alertsLayer","VectorLayer","title","source","olSourceVector","driversLayer","addLayer","setInterval","window","state","wipeOnRefresh","this","fullScreen","tabIcon","style","padding","fontFamily","label","position","width","React","Component","HotApp","hot","ReactDOM","render","document","getElementById"],"mappings":"gSA2BeA,EAtBA,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,4DACF,gIADE,SAEQC,MADV,iIACsBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAFpC,OAEVC,EAFU,OAIRC,EAAWD,EAAUE,KAAI,SAACC,GAC9B,OAAO,IAAIC,UAAJ,yBACLC,KAAK,GAAD,OAAKF,EAASG,SAASC,cAAvB,YAAwC,IAAIC,KAAKL,EAASM,aADzD,2BAGAN,GACAA,EAASO,OAJT,IAMLD,UAAW,IAAID,KAAKL,EAASM,WAC7BE,SAAU,IAAIC,UAAYC,qBAAW,CAACV,EAASW,KAAMX,EAASY,aAKlErB,EAAMsB,YAAYC,QAElBvB,EAAMsB,YAAYE,YAAYjB,GAnBhB,2CAAH,sD,yBCkCAkB,EA/BS,uCAAG,WAAOzB,GAAP,iBAAAC,EAAA,4DACb,2EADa,SAEGC,MADhB,4EAC4BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAF/B,OAErBqB,EAFqB,OAGzB1B,EAAMsB,YAAYC,QAGZI,EAA0BD,EAAgBlB,KAAI,SAACC,GACnD,IAAImB,EAAyB,IAAIlB,UAAJ,yBAC3BC,KAAMF,EAASoB,QACZpB,GAFwB,IAG3BM,UAAW,IAAID,KAAKL,EAASM,WAC7BE,SAAU,IAAIC,UAAYC,qBAAW,CAACV,EAASW,KAAMX,EAASY,UAG1DS,EAAY,IAAIC,UAAQ,CAC5BC,OAAQ,IAAIC,UACVC,MAAO,IAAIC,UAAO,CAClBC,QAAS,EACTC,IAAK,wDACLC,MAAO,QAKX,OAFAV,EAAuBW,SAAST,GAEzBF,KAIP5B,EAAMsB,YAAYE,YAAYG,GA5BP,2CAAH,sDCgETa,E,kDApDb,aAAe,IAAD,8BACZ,gBAKFC,UANc,uCAMF,WAAOjC,GAAP,iBAAAP,EAAA,6DAEJyC,EAAc,IAAIC,cAAY,CAClCC,MAAO,SACPC,OAAQ,IAAIC,UAAe,MAGvBC,EAAe,IAAIJ,cAAY,CACnCC,MAAO,SACPC,OAAQ,IAAIC,UAAe,MAG7BtC,EAAIwC,SAASD,GACbvC,EAAIwC,SAASN,GAbH,SAcJjB,EAAmBsB,GAdf,uBAeJhD,EAAU2C,GAfN,OAgBVO,aAAY,kBAAMxB,EAAmBsB,KAAe,KACpDE,aAAY,kBAAMlD,EAAU2C,KAAc,KAE1CQ,OAAO1C,IAAMA,EAnBH,4CANE,sDAEZ,EAAK2C,MAAQ,CACXC,eAAe,GAHL,E,qDA6BZ,OACE,eAAC,MAAD,CAAKX,UAAWY,KAAKZ,UAAWa,YAAU,EAA1C,UACE,cAAC,QAAD,IACA,eAAC,aAAD,WACE,cAAC,iBAAD,CAAgBC,QAAQ,eAAxB,SACE,cAAC,oBAAD,CAAmBC,MAAO,CAAEC,QAAS,MAAOC,WAAY,6BAAxD,SACE,cAAC,cAAD,QAGJ,cAAC,iBAAD,CAAgBC,MAAO,OAAvB,SACE,cAAC,oBAAD,CAAmBH,MAAO,CAAEC,QAAS,MAAOC,WAAY,6BAAxD,SACE,cAAC,gBAAD,CAAeF,MAAO,CAAEI,SAAU,WAAYC,MAAO,iBAI3D,cAAC,cAAD,IACA,cAAC,WAAD,IACA,cAAC,mBAAD,W,GA/CUC,IAAMC,WCdlBC,EAASC,cAAIzB,GAEnB0B,IAASC,OAAO,cAACH,EAAD,IAAYI,SAASC,eAAe,U","file":"static/js/main.7f4c4e09.chunk.js","sourcesContent":["import { fromLonLat } from 'ol/proj'\nimport olFeature from 'ol/Feature'\nimport olGeomPoint from 'ol/geom/Point'\n\n\nconst getAlerts = async (layer) => {\n    const url = 'https://95gc0kospc.execute-api.ca-central-1.amazonaws.com/prod/alerts?radius=450000000&lat=43.7425651&long=-79.2148452&time=1'\n    let locations = await fetch (url).then(res => res.json())\n\n    const features = locations.map((location) => {\n      return new olFeature({\n        name: `${location.provider.toUpperCase()} ${new Date(location.timestamp)}`,\n        ...{\n          ...location,\n          ...location.data\n        },\n        timestamp: new Date(location.timestamp),\n        geometry: new olGeomPoint(fromLonLat([location.long, location.lat]))\n      })\n    })\n\n    // if (this.state.wipeOnRefresh) layer.getSource().clear()\n    layer.getSource().clear()\n\n    layer.getSource().addFeatures(features)\n  }\n\nexport default getAlerts","import { fromLonLat } from 'ol/proj'\nimport olFeature from 'ol/Feature'\nimport olGeomPoint from 'ol/geom/Point'\nimport olStyle from 'ol/style/Style'\nimport olStroke from 'ol/style/Stroke'\nimport olIcon from 'ol/style/Icon'\nimport olCircleStyle from 'ol/style/Circle'\n\nconst getDriverLocations = async (layer) => {\n  const url = 'https://95gc0kospc.execute-api.ca-central-1.amazonaws.com/prod/locations'\n  let driverLocations = await fetch (url).then(res => res.json())\n  layer.getSource().clear()\n\n\n  const driverLocationsFeatures = driverLocations.map((location) => {\n    let driverLocationsFeature = new olFeature({\n      name: location.userid,\n      ...location,\n      timestamp: new Date(location.timestamp),\n      geometry: new olGeomPoint(fromLonLat([location.long, location.lat]))\n    })\n\n    const iconStyle = new olStyle({\n      stroke: new olStroke(),\n        image: new olIcon({\n        opacity: 1,\n        src: 'https://image.flaticon.com/icons/png/512/89/89132.png',\n        scale: .05\n      })\n    })\n    driverLocationsFeature.setStyle(iconStyle)\n\n    return driverLocationsFeature\n  })\n\n\n    layer.getSource().addFeatures(driverLocationsFeatures)\n  }\n\nexport default getDriverLocations\n\n// STYLING FOR LATER\n//   const driverLocationsFeatures = driverLocations.map((location) => {\n//     console.log(locations)\n//     let driverLocationsFeature = olFeature({\n//       ...location,\n//       timestamp: new Date(location.timestamp),\n//       geometry: new olGeomPoint(fromLonLat([location.long, location.lat]))\n//     })\n\n//     driverLocationsFeature.setStyle(\n//       new olStyle({\n//         image: new olCircleStyle({\n//           radius: 10000,\n//           fill: new olFill({ color: 'red' }),\n//           stroke: new olStroke({\n//             color: 'red',\n//             width: 1\n//           })\n//         })\n//       })\n//     )\n//     return driverLocationsFeature\n//   })","import React from 'react'\nimport {\n  Map,\n  Popup,\n  LayerPanel,\n  Controls,\n  ContextMenu,\n  LayerStyler,\n  LayerPanelPage,\n  LayerPanelContent,\n  BasemapContainer,\n  VectorLayer,\n  DrawContainer\n} from '@bayer/ol-kit'\nimport olSourceVector from 'ol/source/Vector'\nimport getAlerts from './utils/getAlerts'\nimport getDriverLocations from './utils/getDriverLocations'\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      wipeOnRefresh: true\n    }\n  }\n  onMapInit = async (map) => {\n    // create a vector layer and add to the map\n    const alertsLayer = new VectorLayer({\n      title: 'Alerts',\n      source: new olSourceVector({})\n    })\n\n    const driversLayer = new VectorLayer({\n      title: 'Driver',\n      source: new olSourceVector({})\n    })\n\n    map.addLayer(driversLayer)\n    map.addLayer(alertsLayer)\n    await getDriverLocations(driversLayer)\n    await getAlerts(alertsLayer)\n    setInterval(() => getDriverLocations(driversLayer), 30000)\n    setInterval(() => getAlerts(alertsLayer), 30000)\n\n    window.map = map\n  }\n\n  render () {\n    return (\n      <Map onMapInit={this.onMapInit} fullScreen>\n        <Popup />\n        <LayerPanel>\n          <LayerPanelPage tabIcon='Layer Styler'>\n            <LayerPanelContent style={{ padding: '0px', fontFamily: 'Roboto, Arial, sans-serif' }}>\n              <LayerStyler />\n            </LayerPanelContent>\n          </LayerPanelPage>\n          <LayerPanelPage label={'Draw'}>\n            <LayerPanelContent style={{ padding: '0px', fontFamily: 'Roboto, Arial, sans-serif' }}>\n              <DrawContainer style={{ position: 'relative', width: 'auto' }} />\n            </LayerPanelContent>\n          </LayerPanelPage>\n        </LayerPanel>\n        <ContextMenu />\n        <Controls />\n        <BasemapContainer />\n      </Map>\n    )\n  }\n}\n\nexport default App\n","import { hot } from 'react-hot-loader/root'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nconst HotApp = hot(App)\n\nReactDOM.render(<HotApp />, document.getElementById('root'))\n"],"sourceRoot":""}