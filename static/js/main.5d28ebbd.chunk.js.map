{"version":3,"sources":["utils/getDriverLocations.js","utils/getAlerts.js","components/QueryFilter.js","App.js","index.js"],"names":["getDriverLocations","layer","a","fetch","then","res","json","driverLocations","getSource","clear","driverLocationsFeatures","map","location","driverLocationsFeature","olFeature","name","userid","timestamp","Date","geometry","olGeomPoint","fromLonLat","long","lat","iconStyle","olStyle","stroke","olStroke","image","olIcon","opacity","src","scale","setStyle","addFeatures","getAlerts","time","url","locations","features","provider","toUpperCase","data","styles","container","position","right","bottom","backgroundColor","width","borderRadius","padding","textAlign","fontFamily","fontSize","slider","margin","connectToContext","props","useState","setTime","toISOString","randomState","setRandomState","layers","getLayers","getArray","driversLayer","find","get","alertsLayer","fetchEvents","useCallback","console","log","useEffect","setTimeout","style","id","type","min","max","step","value","onChange","e","selectedTime","target","IconButton","onClick","App","onMapInit","VectorLayer","title","source","olSourceVector","addLayer","window","this","fullScreen","React","Component","HotApp","hot","ReactDOM","render","document","getElementById"],"mappings":"uVAqCeA,EA9BS,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,4DACb,2EADa,SAEGC,MADhB,4EAC4BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAF/B,OAErBC,EAFqB,OAGzBN,EAAMO,YAAYC,QAEZC,EAA0BH,EAAgBI,KAAI,SAACC,GACnD,IAAIC,EAAyB,IAAIC,UAAJ,yBAC3BC,KAAMH,EAASI,QACZJ,GAFwB,IAG3BK,UAAW,IAAIC,KAAKN,EAASK,WAC7BE,SAAU,IAAIC,UAAYC,qBAAW,CAACT,EAASU,KAAMV,EAASW,UAG1DC,EAAY,IAAIC,UAAQ,CAC5BC,OAAQ,IAAIC,UACVC,MAAO,IAAIC,UAAO,CAClBC,QAAS,EACTC,IAAK,gFACLC,MAAO,QAKX,OAFAnB,EAAuBoB,SAAST,GAEzBX,KAIPZ,EAAMO,YAAY0B,YAAYxB,GA3BP,2CAAH,sDCmBTyB,EArBA,uCAAG,WAAOlC,EAAP,wBAAAC,EAAA,iEAAgBkC,KACxBC,EADQ,iJAAuB,EAAvB,mCAEQlC,MAAOkC,GAAKjC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAFpC,OAEVgC,EAFU,OAIRC,EAAWD,EAAU3B,KAAI,SAACC,GAC9B,OAAO,IAAIE,UAAJ,yBACLC,KAAK,GAAD,OAAKH,EAAS4B,SAASC,cAAvB,YAAwC,IAAIvB,KAAKN,EAASK,aADzD,2BAGAL,GACAA,EAAS8B,OAJT,IAMLzB,UAAW,IAAIC,KAAKN,EAASK,WAC7BE,SAAU,IAAIC,UAAYC,qBAAW,CAACT,EAASU,KAAMV,EAASW,aAIlEtB,EAAMO,YAAYC,QAElBR,EAAMO,YAAY0B,YAAYK,GAlBhB,2CAAH,wD,4BCyCTI,EAAS,CACXC,UAAW,CACPC,SAAU,WACVC,MAAO,OACPC,OAAQ,OACRC,gBAAiB,QACjBC,MAAO,QACPnB,QAAS,MACToB,aAAc,MACdC,QAAS,OACTC,UAAW,SACXC,WAAY,aACZC,SAAU,UAEdC,OAAQ,CACJN,MAAO,QACPO,OAAQ,SAKDC,8BA5DK,SAAAC,GAAU,IAClB/C,EAAQ+C,EAAR/C,IADiB,EAECgD,mBAAS,GAFV,mBAEjBvB,EAFiB,KAEXwB,EAFW,OAGeD,oBAAS,IAAIzC,MAAO2C,eAHnC,mBAGjBC,EAHiB,KAGJC,EAHI,KAKnBC,EAASrD,EAAIsD,YAAYC,WACzBC,EAAeH,EAAOI,MAAK,SAAAnE,GAAK,MAA2B,WAAvBA,EAAMoE,IAAI,YAC9CC,EAAcN,EAAOI,MAAK,SAAAnE,GAAK,MAA2B,WAAvBA,EAAMoE,IAAI,YAE7CE,EAAcC,uBAAY,WAC5BC,QAAQC,IAAI,oBAEZ1E,EAAmBmE,GACnBhC,EAAUmC,EAAa,CAAElC,YAG7BuC,qBAAU,WACNF,QAAQC,IAAI,qBACZE,YAAW,WACPb,GAAe,IAAI7C,MAAO2C,iBAC3B,KAEHU,MACD,CAAET,IAOL,OACI,sBAAKe,MAAOlC,EAAOC,UAAnB,UACI,8BAAIR,EAAJ,YACA,uBAAOyC,MAAOlC,EAAOY,OAAQuB,GAAG,SAASC,KAAK,QAAQC,IAAI,OAAOC,IAAI,KAAKC,KAAK,OAAOC,MAAO/C,EAAMgD,SAAU,SAACC,GAAD,OAR3FC,EAQoHD,EAAEE,OAAOJ,WAPnJvB,EAAQ0B,GADc,IAAAA,KASlB,cAACE,EAAA,EAAD,CAAYC,QAASlB,EAArB,SAAkC,cAAC,IAAD,YCiB/BmB,E,4MA3CbC,U,uCAAY,WAAOhF,GAAP,iBAAAT,EAAA,sDAEJoE,EAAc,IAAIsB,cAAY,CAClCC,MAAO,SACPC,OAAQ,IAAIC,UAAe,MAGvB5B,EAAe,IAAIyB,cAAY,CACnCC,MAAO,SACPC,OAAQ,IAAIC,UAAe,MAG7BpF,EAAIqF,SAAS7B,GACbxD,EAAIqF,SAAS1B,GAEb2B,OAAOtF,IAAMA,EAfH,2C,6GAmBV,OACE,eAAC,MAAD,CAAKgF,UAAWO,KAAKP,UAAWQ,YAAU,EAA1C,UACE,cAAC,QAAD,IAaA,cAAC,cAAD,IACA,cAAC,EAAD,IACA,cAAC,WAAD,IACA,cAAC,mBAAD,W,GAvCUC,IAAMC,WCRlBC,EAASC,cAAIb,GAEnBc,IAASC,OAAO,cAACH,EAAD,IAAYI,SAASC,eAAe,W","file":"static/js/main.5d28ebbd.chunk.js","sourcesContent":["import { fromLonLat } from 'ol/proj'\nimport olFeature from 'ol/Feature'\nimport olGeomPoint from 'ol/geom/Point'\nimport olStyle from 'ol/style/Style'\nimport olStroke from 'ol/style/Stroke'\nimport olIcon from 'ol/style/Icon'\n\nconst getDriverLocations = async (layer) => {\n  const url = 'https://95gc0kospc.execute-api.ca-central-1.amazonaws.com/prod/locations'\n  let driverLocations = await fetch (url).then(res => res.json())\n  layer.getSource().clear()\n\n  const driverLocationsFeatures = driverLocations.map((location) => {\n    let driverLocationsFeature = new olFeature({\n      name: location.userid,\n      ...location,\n      timestamp: new Date(location.timestamp),\n      geometry: new olGeomPoint(fromLonLat([location.long, location.lat]))\n    })\n\n    const iconStyle = new olStyle({\n      stroke: new olStroke(),\n        image: new olIcon({\n        opacity: 1,\n        src: 'https://cdn3.iconfinder.com/data/icons/car-repair-icons/486/Tow_Truck-512.png',\n        scale: .05\n      })\n    })\n    driverLocationsFeature.setStyle(iconStyle)\n\n    return driverLocationsFeature\n  })\n\n\n    layer.getSource().addFeatures(driverLocationsFeatures)\n  }\n\nexport default getDriverLocations\n\n// STYLING FOR LATER\n//   const driverLocationsFeatures = driverLocations.map((location) => {\n//     console.log(locations)\n//     let driverLocationsFeature = olFeature({\n//       ...location,\n//       timestamp: new Date(location.timestamp),\n//       geometry: new olGeomPoint(fromLonLat([location.long, location.lat]))\n//     })\n\n//     driverLocationsFeature.setStyle(\n//       new olStyle({\n//         image: new olCircleStyle({\n//           radius: 10000,\n//           fill: new olFill({ color: 'red' }),\n//           stroke: new olStroke({\n//             color: 'red',\n//             width: 1\n//           })\n//         })\n//       })\n//     )\n//     return driverLocationsFeature\n//   })","import { fromLonLat } from 'ol/proj'\nimport olFeature from 'ol/Feature'\nimport olGeomPoint from 'ol/geom/Point'\n\n\nconst getAlerts = async (layer, { time = 1 }) => {\n    const url = `https://95gc0kospc.execute-api.ca-central-1.amazonaws.com/prod/alerts?radius=450000000&lat=43.7425651&long=-79.2148452&time=${time}&writeLocation=false`\n    let locations = await fetch (url).then(res => res.json())\n\n    const features = locations.map((location) => {\n      return new olFeature({\n        name: `${location.provider.toUpperCase()} ${new Date(location.timestamp)}`,\n        ...{\n          ...location,\n          ...location.data\n        },\n        timestamp: new Date(location.timestamp),\n        geometry: new olGeomPoint(fromLonLat([location.long, location.lat]))\n      })\n    })\n\n    layer.getSource().clear()\n\n    layer.getSource().addFeatures(features)\n  }\n\nexport default getAlerts","import React, { useState, useEffect, useCallback } from 'react'\nimport { connectToContext } from '@bayer/ol-kit'\nimport getDriverLocations from '../utils/getDriverLocations'\nimport getAlerts from '../utils/getAlerts'\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst QueryFilter = props => {\n    const { map } = props\n    const [ time, setTime ] = useState(1)\n    const [ randomState, setRandomState ] = useState(new Date().toISOString())\n\n    const layers = map.getLayers().getArray()\n    const driversLayer = layers.find(layer => layer.get('title') === 'Driver')\n    const alertsLayer = layers.find(layer => layer.get('title') === 'Alerts')\n\n    const fetchEvents = useCallback(() => {\n        console.log('new data fetched')\n\n        getDriverLocations(driversLayer) // TODO: Move set interval inside getAlerts functions\n        getAlerts(alertsLayer, { time })\n    })\n\n    useEffect(() => {\n        console.log(\"using this effect\")\n        setTimeout(() => {\n            setRandomState(new Date().toISOString())\n        }, 30000)\n\n        fetchEvents()\n    }, [ randomState ])\n\n    const handleQueryChange = selectedTime => {\n        setTime(selectedTime)\n    }\n\n\n    return (\n        <div style={styles.container}>\n            <p>{time} hours</p>\n            <input style={styles.slider} id='radius' type='range' min='0.25' max='10' step='0.25' value={time} onChange={(e) => handleQueryChange(e.target.value)}/>\n            <IconButton onClick={fetchEvents}><RefreshIcon /></IconButton>\n        </div>\n    )\n}\n\nconst styles = {\n    container: {\n        position: 'absolute',\n        right: '15px',\n        bottom: '80px',\n        backgroundColor: 'white',\n        width: '300px',\n        opacity: '0.8',\n        borderRadius: '4px',\n        padding: '10px',\n        textAlign: 'center',\n        fontFamily: 'sans-serif',\n        fontSize: '1.5rem'\n    },\n    slider: {\n        width: '250px',\n        margin: '10px',\n    }\n}\n\n\nexport default connectToContext(QueryFilter)","import React from 'react'\nimport {\n  Map,\n  Popup,\n  Controls,\n  ContextMenu,\n  BasemapContainer,\n  VectorLayer,\n} from '@bayer/ol-kit'\nimport olSourceVector from 'ol/source/Vector'\nimport QueryFilter from './components/QueryFilter'\n\n\nclass App extends React.Component {\n\n  onMapInit = async (map) => {\n    // create a vector layer and add to the map\n    const alertsLayer = new VectorLayer({\n      title: 'Alerts',\n      source: new olSourceVector({})\n    })\n\n    const driversLayer = new VectorLayer({\n      title: 'Driver',\n      source: new olSourceVector({})\n    })\n\n    map.addLayer(driversLayer)\n    map.addLayer(alertsLayer)\n\n    window.map = map\n  }\n\n  render () {\n    return (\n      <Map onMapInit={this.onMapInit} fullScreen>\n        <Popup />\n        {/* <LayerPanel>\n          <LayerPanelPage tabIcon='Layer Styler'>\n            <LayerPanelContent style={{ padding: '0px', fontFamily: 'Roboto, Arial, sans-serif' }}>\n              <LayerStyler />\n            </LayerPanelContent>\n          </LayerPanelPage>\n          <LayerPanelPage label={'Draw'}>\n            <LayerPanelContent style={{ padding: '0px', fontFamily: 'Roboto, Arial, sans-serif' }}>\n              <DrawContainer style={{ position: 'relative', width: 'auto' }} />\n            </LayerPanelContent>\n          </LayerPanelPage>\n        </LayerPanel> */}\n        <ContextMenu />\n        <QueryFilter />\n        <Controls />\n        <BasemapContainer />\n      </Map>\n    )\n  }\n}\n\nexport default App\n","import { hot } from 'react-hot-loader/root'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nconst HotApp = hot(App)\n\nReactDOM.render(<HotApp />, document.getElementById('root'))\n"],"sourceRoot":""}